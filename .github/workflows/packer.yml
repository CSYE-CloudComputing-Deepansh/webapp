name: Build and Deploy Custom AMI

on:
  push:
    branches:
      - main
      - a08
      - a08-demo
jobs:
  test_and_package:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Create .env file with secrets
        env:
          DB_CONN_STRING: ${{ secrets.DB_CONN_STRING }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_INSTANCE: ${{ secrets.DB_INSTANCE }}
        run: |
          echo "DB_CONN_STRING=$DB_CONN_STRING" >> .env
          echo "DB_NAME=$DB_NAME" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_INSTANCE=$DB_INSTANCE" >> .env

      - name: Run integration tests
        env:
          DB_CONN_STRING: ${{ secrets.DB_CONN_STRING }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_INSTANCE: ${{ secrets.DB_INSTANCE }}
        run: |
            #npm test

      - name: Package application with dependencies
        run: |
          mkdir -p build-artifacts
          zip -r build-artifacts/app-package.zip .  # Zip the entire app, including node_modules

      - name: Configure DEV AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with: 
          version: 1.11.2
                   
      - name: Run `packer init`
        id: init
        run: "packer init ./packer/main.pkr.hcl"

      - name: Run packer validate
        run: |
          packer fmt -recursive -check ./packer/main.pkr.hcl
      - name: Run packer validate
        run: |
          # Create the build-artifacts directory and a placeholder app-package.zip file if they don't exist
          # mkdir -p ./build-artifacts
          # touch ./build-artifacts/app-package.zip

          # # Run Packer validate
          # packer validate ./packer/main.pkr.hcl

          # # Optionally, remove the placeholder after validation
          # #rm ./build-artifacts/app-package.zip
     
      - name: Build custom AMI with Packer
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
           PACKER_LOG=1 packer build \
            -var "artifact_path=./build-artifacts/app-package.zip" \
            -var "aws_region=${{ vars.AWS_REGION }}" \
            -var "DB_NAME=${{ secrets.DB_NAME }}" \
            -var "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            -var "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            ./packer/main.pkr.hcl

      - name: Extract Latest AMI ID
        id: ami_id
        run: |
              AMI_ID=$(aws ec2 describe-images \
                --owners self \
                --filters "Name=state,Values=available" \
                --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                --output text)
              echo "Latest AMI ID: $AMI_ID"
              echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV


      - name: Configure AWS credentials (Demo Account)
        uses: aws-actions/configure-aws-credentials@v1
        with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
                aws-region: ${{ vars.AWS_REGION }}
    
      - name: Update Launch Template with New AMI
        id: update_launch_template
        env:
          LAUNCH_TEMPLATE_ID: ${{ vars.LAUNCH_TEMPLATE_ID }}
        run: |
                  set -e  # Exit immediately if a command exits with a non-zero status
              
                  echo "Updating Launch Template with AMI ID: $AMI_ID"
                  echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
              
                  # Create a new launch template version
                  aws ec2 create-launch-template-version \
                    --launch-template-id "${LAUNCH_TEMPLATE_ID}" \
                    --version-description "New version with AMI ${AMI_ID}" \
                    --source-version 1 \
                    --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}"
              
                  # Set the new version as the default
                  DEFAULT_VERSION=$(aws ec2 describe-launch-template-versions \
                    --launch-template-id "${LAUNCH_TEMPLATE_ID}" \
                    --query 'LaunchTemplateVersions[-1].VersionNumber' \
                    --output text)
              
                  echo "Setting Launch Template default version to: $DEFAULT_VERSION"
              
                  aws ec2 modify-launch-template \
                    --launch-template-id "${LAUNCH_TEMPLATE_ID}" \
                    --default-version "${DEFAULT_VERSION}"
              
      - name: Start Instance Refresh
        id: instance_refresh
        env:
          ASG_NAME: ${{ vars.ASG_NAME }}
        run: |
                  set -e
                  echo "ASG_NAME: $ASG_NAME"
                  echo "Starting Instance Refresh for Auto Scaling Group: ${ASG_NAME}"
              
                  REFRESH_ID=$(aws autoscaling start-instance-refresh \
                    --auto-scaling-group-name "${ASG_NAME}" \
                    --preferences "{\"MinHealthyPercentage\": 90}" \
                    --query 'InstanceRefreshId' \
                    --output text)
              
                  echo "Instance Refresh ID: $REFRESH_ID"
                  echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
              
      - name: Wait for Instance Refresh to Complete
        env:
          ASG_NAME: ${{ vars.ASG_NAME }}
          REFRESH_ID: ${{ env.REFRESH_ID }}
        run: |
              set -e

              echo "Waiting for Instance Refresh to Complete"
              echo "ASG Name: ${ASG_NAME}"
              echo "Refresh ID: ${REFRESH_ID}"

              STATUS="Pending"
              while [[ "$STATUS" == "Pending" || "$STATUS" == "InProgress" ]]; do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name "${ASG_NAME}" \
                --query "InstanceRefreshes[?InstanceRefreshId=='${REFRESH_ID}'].Status" \
                  --output text)
              echo "Current Status: $STATUS"
              sleep 30
              done

              if [[ "$STATUS" == "Successful" ]]; then
                echo "Instance refresh completed successfully."
              else
                echo "Instance refresh failed with status: $STATUS"
              exit 1
              fi

              